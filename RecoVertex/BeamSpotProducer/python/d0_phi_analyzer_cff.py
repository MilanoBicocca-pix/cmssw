import FWCore.ParameterSet.Config as cms

d0_phi_analyzer = cms.EDAnalyzer("BeamSpotAnalyzer",
    BSAnalyzerParameters = cms.PSet(
        RunAllFitters = cms.bool(False), ## False: run only default fitter
        RunBeamWidthFit = cms.bool(False), 
        WriteToDB = cms.bool(False), ## do not write results to DB
        fitEveryNLumi = cms.untracked.int32( -1 ),
        resetEveryNLumi = cms.untracked.int32( -1 )
    ),
    BeamFitter = cms.PSet(
        AppendRunToFileName = cms.untracked.bool(True),
        AsciiFileName = cms.untracked.string('BeamFit.txt'),
        DIPFileName = cms.untracked.string('BeamFitDIP.txt'),
        Debug = cms.untracked.bool(False),
        FractionOfFittedTrks = cms.untracked.double(0.9),
        InputBeamWidth = cms.untracked.double(-1.0),
        IsMuonCollection = cms.untracked.bool(False),
        MaximumEta = cms.untracked.double(2.4),
        MaximumImpactParameter = cms.untracked.double(1.0),
        MaximumNormChi2 = cms.untracked.double(10),
        MaximumZ = cms.untracked.double(60),
        MinimumInputTracks = cms.untracked.int32(50),
        MinimumPixelLayers = cms.untracked.int32(-1),
        MinimumPt = cms.untracked.double(1.0),
        MinimumTotalLayers = cms.untracked.int32(6),
        OutputFileName = cms.untracked.string('analyze_d0_phi.root'),
        SaveFitResults = cms.untracked.bool(False),
        SaveNtuple = cms.untracked.bool(False),
        SavePVVertices = cms.untracked.bool(False),
        TrackAlgorithm = cms.untracked.vstring(),
        TrackCollection = cms.untracked.InputTag("ALCARECOTkAlMinBias"),
        TrackQuality = cms.untracked.vstring(),
        WriteAscii = cms.untracked.bool(False),
        WriteDIPAscii = cms.untracked.bool(False)
#         AppendRunToFileName = cms.untracked.bool(True), #runnumber will be inserted to the file name
#         AsciiFileName = cms.untracked.string('BeamFit.txt'), ## all results
#         DIPFileName = cms.untracked.string('BeamFitDIP.txt'), ## only the last results, for DIP
#         Debug = cms.untracked.bool(False),
#         FractionOfFittedTrks = cms.untracked.double(0.9),
#         InputBeamWidth = cms.untracked.double(0.0060), ## beam width used for Trk fitter, used only when result from PV is not available
#         IsMuonCollection = cms.untracked.bool(False),
#         MaximumEta = cms.untracked.double(2.4),
#         MaximumImpactParameter = cms.untracked.double(5),   #sara: alca is 1.0
#         MaximumNormChi2 = cms.untracked.double(2.0),        # alca: is 10
#         MaximumZ = cms.untracked.double(60),
#         MinimumInputTracks = cms.untracked.int32(100)       # alca: is 50
#         MinimumPixelLayers = cms.untracked.int32(3),        # alca: is -1 
#         MinimumPt = cms.untracked.double(1.2),              # alca: is 1.0 
#         MinimumTotalLayers = cms.untracked.int32(11),       # alca: is 6
#         OutputFileName = cms.untracked.string('analyze_d0_phi.root'),
#         SaveFitResults = cms.untracked.bool(False),
#         SaveNtuple = cms.untracked.bool(False),
#         SavePVVertices = cms.untracked.bool(False),
#         TrackAlgorithm = cms.untracked.vstring('initialStep'), # sara: alca is null ## ctf,rs,cosmics,initialStep,lowPtTripletStep...; for all algos, leave it blank
#         TrackCollection = cms.untracked.InputTag('generalTracks'),
#         TrackQuality = cms.untracked.vstring(), ## loose, tight, highPurity...; for all qualities, leave it blank
#         WriteAscii = cms.untracked.bool(True),
#         WriteDIPAscii = cms.untracked.bool(False),
     ),
     PVFitter = cms.PSet(
        Apply3DFit = cms.untracked.bool(False),
        Debug = cms.untracked.bool(False),
        FitPerBunchCrossing = cms.untracked.bool(False),
        VertexCollection = cms.untracked.InputTag('offlinePrimaryVertices'),
        #WriteAscii = cms.untracked.bool(True),
        #AsciiFileName = cms.untracked.string('PVFit.txt'),
        errorScale = cms.untracked.double(0.9),              
        maxNrStoredVertices = cms.untracked.uint32(10000),
        maxVertexNormChi2 = cms.untracked.double(10.),
        maxVertexR = cms.untracked.double(2),
        maxVertexZ = cms.untracked.double(10),
        minNrVerticesForFit = cms.untracked.uint32(100),    # alca is 10
        minVertexMeanWeight = cms.untracked.double(0.5),    
        minVertexNTracks = cms.untracked.uint32(0),    
        minVertexNdf = cms.untracked.double(10.),
        nSigmaCut = cms.untracked.double(5.),               # alca is 50
     )
)

